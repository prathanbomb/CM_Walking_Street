package com.test.material.supitsara.materialnavigationtest;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.test.material.supitsara.materialnavigationtest.Tour;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TOUR.
*/
public class TourDao extends AbstractDao<Tour, Long> {

    public static final String TABLENAME = "TOUR";

    /**
     * Properties of entity Tour.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserID = new Property(1, String.class, "userID", false, "USER_ID");
        public final static Property BoothID = new Property(2, String.class, "boothID", false, "BOOTH_ID");
        public final static Property Lat = new Property(3, Double.class, "Lat", false, "LAT");
        public final static Property Long = new Property(4, Double.class, "Long", false, "LONG");
    };


    public TourDao(DaoConfig config) {
        super(config);
    }
    
    public TourDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TOUR' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' TEXT," + // 1: userID
                "'BOOTH_ID' TEXT," + // 2: boothID
                "'LAT' REAL," + // 3: Lat
                "'LONG' REAL);"); // 4: Long
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TOUR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tour entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(2, userID);
        }
 
        String boothID = entity.getBoothID();
        if (boothID != null) {
            stmt.bindString(3, boothID);
        }
 
        Double Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(4, Lat);
        }
 
        Double Long = entity.getLong();
        if (Long != null) {
            stmt.bindDouble(5, Long);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Tour readEntity(Cursor cursor, int offset) {
        Tour entity = new Tour( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // boothID
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Lat
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4) // Long
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tour entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBoothID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLat(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLong(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tour entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Tour entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
